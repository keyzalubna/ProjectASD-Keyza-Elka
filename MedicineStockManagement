#𝚒𝚗𝚌𝚕𝚞𝚍𝚎 <𝚒𝚘𝚜𝚝𝚛𝚎𝚊𝚖>
#𝚒𝚗𝚌𝚕𝚞𝚍𝚎 <𝚒𝚘𝚖𝚊𝚗𝚒𝚙>
#𝚒𝚗𝚌𝚕𝚞𝚍𝚎 <𝚜𝚝𝚛𝚒𝚗𝚐>
#𝚒𝚗𝚌𝚕𝚞𝚍𝚎 <𝚕𝚒𝚖𝚒𝚝𝚜>
#𝚒𝚗𝚌𝚕𝚞𝚍𝚎 <𝚌𝚌𝚝𝚢𝚙𝚎>
𝚞𝚜𝚒𝚗𝚐 𝚗𝚊𝚖𝚎𝚜𝚙𝚊𝚌𝚎 𝚜𝚝𝚍;

𝚜𝚝𝚛𝚞𝚌𝚝 𝙾𝚋𝚊𝚝 {
    𝚜𝚝𝚛𝚒𝚗𝚐 𝚗𝚊𝚖𝚊;
    𝚒𝚗𝚝 𝚜𝚝𝚘𝚔;
    𝙾𝚋𝚊𝚝* 𝚕𝚎𝚏𝚝;
    𝙾𝚋𝚊𝚝* 𝚛𝚒𝚐𝚑𝚝;
};

𝚜𝚝𝚛𝚒𝚗𝚐 𝚝𝚘𝙻𝚘𝚠𝚎𝚛(𝚜𝚝𝚛𝚒𝚗𝚐 𝚜) {
    𝚏𝚘𝚛 (𝚌𝚑𝚊𝚛 &𝚌 : 𝚜)
        𝚌 = 𝚝𝚘𝚕𝚘𝚠𝚎𝚛(𝚌);
    𝚛𝚎𝚝𝚞𝚛𝚗 𝚜;
}

𝙾𝚋𝚊𝚝* 𝚋𝚞𝚊𝚝𝙽𝚘𝚍𝚎(𝚜𝚝𝚛𝚒𝚗𝚐 𝚗𝚊𝚖𝚊, 𝚒𝚗𝚝 𝚜𝚝𝚘𝚔) {
    𝙾𝚋𝚊𝚝* 𝚗𝚘𝚍𝚎 = 𝚗𝚎𝚠 𝙾𝚋𝚊𝚝;
    𝚗𝚘𝚍𝚎->𝚗𝚊𝚖𝚊 = 𝚗𝚊𝚖𝚊;
    𝚗𝚘𝚍𝚎->𝚜𝚝𝚘𝚔 = 𝚜𝚝𝚘𝚔;
    𝚗𝚘𝚍𝚎->𝚕𝚎𝚏𝚝 = 𝚗𝚘𝚍𝚎->𝚛𝚒𝚐𝚑𝚝 = 𝙽𝚄𝙻𝙻;
    𝚛𝚎𝚝𝚞𝚛𝚗 𝚗𝚘𝚍𝚎;
}

𝙾𝚋𝚊𝚝* 𝚒𝚗𝚜𝚎𝚛𝚝(𝙾𝚋𝚊𝚝* 𝚛𝚘𝚘𝚝, 𝚜𝚝𝚛𝚒𝚗𝚐 𝚗𝚊𝚖𝚊, 𝚒𝚗𝚝 𝚜𝚝𝚘𝚔) {
    𝚗𝚊𝚖𝚊 = 𝚝𝚘𝙻𝚘𝚠𝚎𝚛(𝚗𝚊𝚖𝚊);
    𝚒𝚏 (𝚛𝚘𝚘𝚝 == 𝙽𝚄𝙻𝙻)
        𝚛𝚎𝚝𝚞𝚛𝚗 𝚋𝚞𝚊𝚝𝙽𝚘𝚍𝚎(𝚗𝚊𝚖𝚊, 𝚜𝚝𝚘𝚔);

    𝚒𝚏 (𝚗𝚊𝚖𝚊 < 𝚛𝚘𝚘𝚝->𝚗𝚊𝚖𝚊)
        𝚛𝚘𝚘𝚝->𝚕𝚎𝚏𝚝 = 𝚒𝚗𝚜𝚎𝚛𝚝(𝚛𝚘𝚘𝚝->𝚕𝚎𝚏𝚝, 𝚗𝚊𝚖𝚊, 𝚜𝚝𝚘𝚔);
    𝚎𝚕𝚜𝚎 𝚒𝚏 (𝚗𝚊𝚖𝚊 > 𝚛𝚘𝚘𝚝->𝚗𝚊𝚖𝚊)
        𝚛𝚘𝚘𝚝->𝚛𝚒𝚐𝚑𝚝 = 𝚒𝚗𝚜𝚎𝚛𝚝(𝚛𝚘𝚘𝚝->𝚛𝚒𝚐𝚑𝚝, 𝚗𝚊𝚖𝚊, 𝚜𝚝𝚘𝚔);
    𝚎𝚕𝚜𝚎
        𝚌𝚘𝚞𝚝 << "𝙾𝚋𝚊𝚝 \"" << 𝚗𝚊𝚖𝚊 << "\" 𝚜𝚞𝚍𝚊𝚑 𝚊𝚍𝚊.\𝚗";

    𝚛𝚎𝚝𝚞𝚛𝚗 𝚛𝚘𝚘𝚝;
}

𝙾𝚋𝚊𝚝* 𝚜𝚎𝚊𝚛𝚌𝚑(𝙾𝚋𝚊𝚝* 𝚛𝚘𝚘𝚝, 𝚜𝚝𝚛𝚒𝚗𝚐 𝚗𝚊𝚖𝚊) {
    𝚗𝚊𝚖𝚊 = 𝚝𝚘𝙻𝚘𝚠𝚎𝚛(𝚗𝚊𝚖𝚊);
    𝚒𝚏 (𝚛𝚘𝚘𝚝 == 𝙽𝚄𝙻𝙻 || 𝚛𝚘𝚘𝚝->𝚗𝚊𝚖𝚊 == 𝚗𝚊𝚖𝚊)
        𝚛𝚎𝚝𝚞𝚛𝚗 𝚛𝚘𝚘𝚝;

    𝚒𝚏 (𝚗𝚊𝚖𝚊 < 𝚛𝚘𝚘𝚝->𝚗𝚊𝚖𝚊)
        𝚛𝚎𝚝𝚞𝚛𝚗 𝚜𝚎𝚊𝚛𝚌𝚑(𝚛𝚘𝚘𝚝->𝚕𝚎𝚏𝚝, 𝚗𝚊𝚖𝚊);
    𝚎𝚕𝚜𝚎
        𝚛𝚎𝚝𝚞𝚛𝚗 𝚜𝚎𝚊𝚛𝚌𝚑(𝚛𝚘𝚘𝚝->𝚛𝚒𝚐𝚑𝚝, 𝚗𝚊𝚖𝚊);
}

𝙾𝚋𝚊𝚝* 𝚖𝚒𝚗𝚅𝚊𝚕𝚞𝚎𝙽𝚘𝚍𝚎(𝙾𝚋𝚊𝚝* 𝚗𝚘𝚍𝚎) {
    𝙾𝚋𝚊𝚝* 𝚌𝚞𝚛𝚛𝚎𝚗𝚝 = 𝚗𝚘𝚍𝚎;
    𝚠𝚑𝚒𝚕𝚎 (𝚌𝚞𝚛𝚛𝚎𝚗𝚝 && 𝚌𝚞𝚛𝚛𝚎𝚗𝚝->𝚕𝚎𝚏𝚝 != 𝙽𝚄𝙻𝙻)
        𝚌𝚞𝚛𝚛𝚎𝚗𝚝 = 𝚌𝚞𝚛𝚛𝚎𝚗𝚝->𝚕𝚎𝚏𝚝;
    𝚛𝚎𝚝𝚞𝚛𝚗 𝚌𝚞𝚛𝚛𝚎𝚗𝚝;
}

𝙾𝚋𝚊𝚝* 𝚍𝚎𝚕𝚎𝚝𝚎𝙽𝚘𝚍𝚎(𝙾𝚋𝚊𝚝* 𝚛𝚘𝚘𝚝, 𝚜𝚝𝚛𝚒𝚗𝚐 𝚗𝚊𝚖𝚊) {
    𝚗𝚊𝚖𝚊 = 𝚝𝚘𝙻𝚘𝚠𝚎𝚛(𝚗𝚊𝚖𝚊);
    𝚒𝚏 (𝚛𝚘𝚘𝚝 == 𝙽𝚄𝙻𝙻)
        𝚛𝚎𝚝𝚞𝚛𝚗 𝚛𝚘𝚘𝚝;

    𝚒𝚏 (𝚗𝚊𝚖𝚊 < 𝚛𝚘𝚘𝚝->𝚗𝚊𝚖𝚊)
        𝚛𝚘𝚘𝚝->𝚕𝚎𝚏𝚝 = 𝚍𝚎𝚕𝚎𝚝𝚎𝙽𝚘𝚍𝚎(𝚛𝚘𝚘𝚝->𝚕𝚎𝚏𝚝, 𝚗𝚊𝚖𝚊);
    𝚎𝚕𝚜𝚎 𝚒𝚏 (𝚗𝚊𝚖𝚊 > 𝚛𝚘𝚘𝚝->𝚗𝚊𝚖𝚊)
        𝚛𝚘𝚘𝚝->𝚛𝚒𝚐𝚑𝚝 = 𝚍𝚎𝚕𝚎𝚝𝚎𝙽𝚘𝚍𝚎(𝚛𝚘𝚘𝚝->𝚛𝚒𝚐𝚑𝚝, 𝚗𝚊𝚖𝚊);
    𝚎𝚕𝚜𝚎 {
        𝚒𝚏 (𝚛𝚘𝚘𝚝->𝚕𝚎𝚏𝚝 == 𝙽𝚄𝙻𝙻) {
            𝙾𝚋𝚊𝚝* 𝚝𝚎𝚖𝚙 = 𝚛𝚘𝚘𝚝->𝚛𝚒𝚐𝚑𝚝;
            𝚍𝚎𝚕𝚎𝚝𝚎 𝚛𝚘𝚘𝚝;
            𝚛𝚎𝚝𝚞𝚛𝚗 𝚝𝚎𝚖𝚙;
        } 𝚎𝚕𝚜𝚎 𝚒𝚏 (𝚛𝚘𝚘𝚝->𝚛𝚒𝚐𝚑𝚝 == 𝙽𝚄𝙻𝙻) {
            𝙾𝚋𝚊𝚝* 𝚝𝚎𝚖𝚙 = 𝚛𝚘𝚘𝚝->𝚕𝚎𝚏𝚝;
            𝚍𝚎𝚕𝚎𝚝𝚎 𝚛𝚘𝚘𝚝;
            𝚛𝚎𝚝𝚞𝚛𝚗 𝚝𝚎𝚖𝚙;
        }

        𝙾𝚋𝚊𝚝* 𝚝𝚎𝚖𝚙 = 𝚖𝚒𝚗𝚅𝚊𝚕𝚞𝚎𝙽𝚘𝚍𝚎(𝚛𝚘𝚘𝚝->𝚛𝚒𝚐𝚑𝚝);
        𝚛𝚘𝚘𝚝->𝚗𝚊𝚖𝚊 = 𝚝𝚎𝚖𝚙->𝚗𝚊𝚖𝚊;
        𝚛𝚘𝚘𝚝->𝚜𝚝𝚘𝚔 = 𝚝𝚎𝚖𝚙->𝚜𝚝𝚘𝚔;
        𝚛𝚘𝚘𝚝->𝚛𝚒𝚐𝚑𝚝 = 𝚍𝚎𝚕𝚎𝚝𝚎𝙽𝚘𝚍𝚎(𝚛𝚘𝚘𝚝->𝚛𝚒𝚐𝚑𝚝, 𝚝𝚎𝚖𝚙->𝚗𝚊𝚖𝚊);
    }
    𝚛𝚎𝚝𝚞𝚛𝚗 𝚛𝚘𝚘𝚝;
}

𝚟𝚘𝚒𝚍 𝚞𝚙𝚍𝚊𝚝𝚎𝚂𝚝𝚘𝚔(𝙾𝚋𝚊𝚝* 𝚛𝚘𝚘𝚝, 𝚜𝚝𝚛𝚒𝚗𝚐 𝚗𝚊𝚖𝚊, 𝚒𝚗𝚝 𝚜𝚝𝚘𝚔𝙱𝚊𝚛𝚞) {
    𝙾𝚋𝚊𝚝* 𝚗𝚘𝚍𝚎 = 𝚜𝚎𝚊𝚛𝚌𝚑(𝚛𝚘𝚘𝚝, 𝚗𝚊𝚖𝚊);
    𝚒𝚏 (𝚗𝚘𝚍𝚎) {
        𝚗𝚘𝚍𝚎->𝚜𝚝𝚘𝚔 = 𝚜𝚝𝚘𝚔𝙱𝚊𝚛𝚞;
        𝚌𝚘𝚞𝚝 << "𝚂𝚝𝚘𝚔 𝚘𝚋𝚊𝚝 \"" << 𝚗𝚘𝚍𝚎->𝚗𝚊𝚖𝚊 << "\" 𝚍𝚒𝚙𝚎𝚛𝚋𝚊𝚛𝚞𝚒.\𝚗";
    } 𝚎𝚕𝚜𝚎 {
        𝚌𝚘𝚞𝚝 << "𝙾𝚋𝚊𝚝 𝚝𝚒𝚍𝚊𝚔 𝚍𝚒𝚝𝚎𝚖𝚞𝚔𝚊𝚗.\𝚗";
    }
}

𝚟𝚘𝚒𝚍 𝚝𝚊𝚖𝚙𝚒𝚕𝚔𝚊𝚗𝚃𝚊𝚋𝚎𝚕(𝙾𝚋𝚊𝚝* 𝚛𝚘𝚘𝚝) {
    𝚒𝚏 (𝚛𝚘𝚘𝚝 != 𝙽𝚄𝙻𝙻) {
        𝚝𝚊𝚖𝚙𝚒𝚕𝚔𝚊𝚗𝚃𝚊𝚋𝚎𝚕(𝚛𝚘𝚘𝚝->𝚕𝚎𝚏𝚝);
        𝚌𝚘𝚞𝚝 << 𝚕𝚎𝚏𝚝 << 𝚜𝚎𝚝𝚠(𝟹𝟶) << 𝚛𝚘𝚘𝚝->𝚗𝚊𝚖𝚊 << 𝚜𝚎𝚝𝚠(𝟷𝟶) << 𝚛𝚘𝚘𝚝->𝚜𝚝𝚘𝚔 << 𝚎𝚗𝚍𝚕;
        𝚝𝚊𝚖𝚙𝚒𝚕𝚔𝚊𝚗𝚃𝚊𝚋𝚎𝚕(𝚛𝚘𝚘𝚝->𝚛𝚒𝚐𝚑𝚝);
    }
}

𝚟𝚘𝚒𝚍 𝚝𝚊𝚖𝚙𝚒𝚕𝚔𝚊𝚗𝙷𝚎𝚊𝚍𝚎𝚛𝚃𝚊𝚋𝚎𝚕() {
    𝚌𝚘𝚞𝚝 << 𝚕𝚎𝚏𝚝 << 𝚜𝚎𝚝𝚠(𝟹𝟶) << "𝙽𝚊𝚖𝚊 𝙾𝚋𝚊𝚝" << 𝚜𝚎𝚝𝚠(𝟷𝟶) << "𝚂𝚝𝚘𝚔" << 𝚎𝚗𝚍𝚕;
    𝚌𝚘𝚞𝚝 << 𝚜𝚝𝚛𝚒𝚗𝚐(𝟺𝟶, '-') << 𝚎𝚗𝚍𝚕;
}

𝚟𝚘𝚒𝚍 𝚖𝚎𝚗𝚞() {
    𝚌𝚘𝚞𝚝 << "\𝚗=== 𝙼𝚊𝚗𝚊𝚓𝚎𝚖𝚎𝚗 𝚂𝚝𝚘𝚔 𝙾𝚋𝚊𝚝 (𝙱𝚂𝚃) ===\𝚗";
    𝚌𝚘𝚞𝚝 << "𝟷. 𝚃𝚊𝚖𝚋𝚊𝚑 𝙾𝚋𝚊𝚝\𝚗";
    𝚌𝚘𝚞𝚝 << "𝟸. 𝙲𝚊𝚛𝚒 𝙾𝚋𝚊𝚝\𝚗";
    𝚌𝚘𝚞𝚝 << "𝟹. 𝚄𝚙𝚍𝚊𝚝𝚎 𝚂𝚝𝚘𝚔\𝚗";
    𝚌𝚘𝚞𝚝 << "𝟺. 𝙷𝚊𝚙𝚞𝚜 𝙾𝚋𝚊𝚝\𝚗";
    𝚌𝚘𝚞𝚝 << "𝟻. 𝚃𝚊𝚖𝚙𝚒𝚕𝚔𝚊𝚗 𝚂𝚎𝚖𝚞𝚊 𝙾𝚋𝚊𝚝\𝚗";
    𝚌𝚘𝚞𝚝 << "𝟼. 𝙺𝚎𝚕𝚞𝚊𝚛\𝚗";
    𝚌𝚘𝚞𝚝 << "𝙿𝚒𝚕𝚒𝚑 𝚖𝚎𝚗𝚞 [𝟷-𝟼]: ";
}

𝚒𝚗𝚝 𝚒𝚗𝚙𝚞𝚝𝙰𝚗𝚐𝚔𝚊(𝚜𝚝𝚛𝚒𝚗𝚐 𝚙𝚎𝚜𝚊𝚗) {
    𝚒𝚗𝚝 𝚊𝚗𝚐𝚔𝚊;
    𝚠𝚑𝚒𝚕𝚎 (𝚝𝚛𝚞𝚎) {
        𝚌𝚘𝚞𝚝 << 𝚙𝚎𝚜𝚊𝚗;
        𝚌𝚒𝚗 >> 𝚊𝚗𝚐𝚔𝚊;
        𝚒𝚏 (𝚌𝚒𝚗.𝚏𝚊𝚒𝚕() || 𝚊𝚗𝚐𝚔𝚊 < 𝟶) {
            𝚌𝚘𝚞𝚝 << "𝙸𝚗𝚙𝚞𝚝 𝚝𝚒𝚍𝚊𝚔 𝚟𝚊𝚕𝚒𝚍. 𝙼𝚊𝚜𝚞𝚔𝚔𝚊𝚗 𝚋𝚒𝚕𝚊𝚗𝚐𝚊𝚗 𝚋𝚞𝚕𝚊𝚝 𝚙𝚘𝚜𝚒𝚝𝚒𝚏.\𝚗";
            𝚌𝚒𝚗.𝚌𝚕𝚎𝚊𝚛();
            𝚌𝚒𝚗.𝚒𝚐𝚗𝚘𝚛𝚎(𝚗𝚞𝚖𝚎𝚛𝚒𝚌_𝚕𝚒𝚖𝚒𝚝𝚜<𝚜𝚝𝚛𝚎𝚊𝚖𝚜𝚒𝚣𝚎>::𝚖𝚊𝚡(), '\𝚗');
        } 𝚎𝚕𝚜𝚎 {
            𝚌𝚒𝚗.𝚒𝚐𝚗𝚘𝚛𝚎();
            𝚛𝚎𝚝𝚞𝚛𝚗 𝚊𝚗𝚐𝚔𝚊;
        }
    }
}

𝚜𝚝𝚛𝚒𝚗𝚐 𝚒𝚗𝚙𝚞𝚝𝙽𝚊𝚖𝚊(𝚜𝚝𝚛𝚒𝚗𝚐 𝚙𝚛𝚘𝚖𝚙𝚝) {
    𝚜𝚝𝚛𝚒𝚗𝚐 𝚗𝚊𝚖𝚊;
    𝚠𝚑𝚒𝚕𝚎 (𝚝𝚛𝚞𝚎) {
        𝚌𝚘𝚞𝚝 << 𝚙𝚛𝚘𝚖𝚙𝚝;
        𝚐𝚎𝚝𝚕𝚒𝚗𝚎(𝚌𝚒𝚗, 𝚗𝚊𝚖𝚊);
        𝚒𝚏 (𝚗𝚊𝚖𝚊.𝚎𝚖𝚙𝚝𝚢()) {
            𝚌𝚘𝚞𝚝 << "𝙽𝚊𝚖𝚊 𝚘𝚋𝚊𝚝 𝚝𝚒𝚍𝚊𝚔 𝚋𝚘𝚕𝚎𝚑 𝚔𝚘𝚜𝚘𝚗𝚐.\𝚗";
        } 𝚎𝚕𝚜𝚎 {
            𝚛𝚎𝚝𝚞𝚛𝚗 𝚗𝚊𝚖𝚊;
        }
    }
}

𝚒𝚗𝚝 𝚖𝚊𝚒𝚗() {
    𝙾𝚋𝚊𝚝* 𝚛𝚘𝚘𝚝 = 𝙽𝚄𝙻𝙻;
    𝚒𝚗𝚝 𝚙𝚒𝚕𝚒𝚑𝚊𝚗;

    𝚍𝚘 {
        𝚖𝚎𝚗𝚞();
        𝚌𝚒𝚗 >> 𝚙𝚒𝚕𝚒𝚑𝚊𝚗;

        𝚒𝚏 (𝚌𝚒𝚗.𝚏𝚊𝚒𝚕()) {
            𝚌𝚘𝚞𝚝 << "𝙼𝚊𝚜𝚞𝚔𝚔𝚊𝚗 𝚊𝚗𝚐𝚔𝚊 𝚊𝚗𝚝𝚊𝚛𝚊 𝟷-𝟼.\𝚗";
            𝚌𝚒𝚗.𝚌𝚕𝚎𝚊𝚛();
            𝚌𝚒𝚗.𝚒𝚐𝚗𝚘𝚛𝚎(𝚗𝚞𝚖𝚎𝚛𝚒𝚌_𝚕𝚒𝚖𝚒𝚝𝚜<𝚜𝚝𝚛𝚎𝚊𝚖𝚜𝚒𝚣𝚎>::𝚖𝚊𝚡(), '\𝚗');
            𝚌𝚘𝚗𝚝𝚒𝚗𝚞𝚎;
        }

        𝚌𝚒𝚗.𝚒𝚐𝚗𝚘𝚛𝚎(); // 𝚑𝚊𝚙𝚞𝚜 𝚗𝚎𝚠𝚕𝚒𝚗𝚎
        𝚜𝚝𝚛𝚒𝚗𝚐 𝚗𝚊𝚖𝚊;
        𝚒𝚗𝚝 𝚜𝚝𝚘𝚔;

        𝚜𝚠𝚒𝚝𝚌𝚑 (𝚙𝚒𝚕𝚒𝚑𝚊𝚗) {
            𝚌𝚊𝚜𝚎 𝟷:
                𝚗𝚊𝚖𝚊 = 𝚒𝚗𝚙𝚞𝚝𝙽𝚊𝚖𝚊("𝙼𝚊𝚜𝚞𝚔𝚔𝚊𝚗 𝚗𝚊𝚖𝚊 𝚘𝚋𝚊𝚝: ");
                𝚜𝚝𝚘𝚔 = 𝚒𝚗𝚙𝚞𝚝𝙰𝚗𝚐𝚔𝚊("𝙼𝚊𝚜𝚞𝚔𝚔𝚊𝚗 𝚜𝚝𝚘𝚔: ");
                𝚛𝚘𝚘𝚝 = 𝚒𝚗𝚜𝚎𝚛𝚝(𝚛𝚘𝚘𝚝, 𝚗𝚊𝚖𝚊, 𝚜𝚝𝚘𝚔);
                𝚋𝚛𝚎𝚊𝚔;
            𝚌𝚊𝚜𝚎 𝟸:
                𝚗𝚊𝚖𝚊 = 𝚒𝚗𝚙𝚞𝚝𝙽𝚊𝚖𝚊("𝙼𝚊𝚜𝚞𝚔𝚔𝚊𝚗 𝚗𝚊𝚖𝚊 𝚘𝚋𝚊𝚝 𝚢𝚊𝚗𝚐 𝚍𝚒𝚌𝚊𝚛𝚒: ");
                {
                    𝙾𝚋𝚊𝚝* 𝚑𝚊𝚜𝚒𝚕 = 𝚜𝚎𝚊𝚛𝚌𝚑(𝚛𝚘𝚘𝚝, 𝚗𝚊𝚖𝚊);
                    𝚒𝚏 (𝚑𝚊𝚜𝚒𝚕)
                        𝚌𝚘𝚞𝚝 << "𝙳𝚒𝚝𝚎𝚖𝚞𝚔𝚊𝚗: " << 𝚑𝚊𝚜𝚒𝚕->𝚗𝚊𝚖𝚊 << ", 𝚂𝚝𝚘𝚔: " << 𝚑𝚊𝚜𝚒𝚕->𝚜𝚝𝚘𝚔 << 𝚎𝚗𝚍𝚕;
                    𝚎𝚕𝚜𝚎
                        𝚌𝚘𝚞𝚝 << "𝙾𝚋𝚊𝚝 𝚝𝚒𝚍𝚊𝚔 𝚍𝚒𝚝𝚎𝚖𝚞𝚔𝚊𝚗.\𝚗";
                }
                𝚋𝚛𝚎𝚊𝚔;
            𝚌𝚊𝚜𝚎 𝟹:
                𝚗𝚊𝚖𝚊 = 𝚒𝚗𝚙𝚞𝚝𝙽𝚊𝚖𝚊("𝙼𝚊𝚜𝚞𝚔𝚔𝚊𝚗 𝚗𝚊𝚖𝚊 𝚘𝚋𝚊𝚝: ");
                𝚜𝚝𝚘𝚔 = 𝚒𝚗𝚙𝚞𝚝𝙰𝚗𝚐𝚔𝚊("𝙼𝚊𝚜𝚞𝚔𝚔𝚊𝚗 𝚜𝚝𝚘𝚔 𝚋𝚊𝚛𝚞: ");
                𝚞𝚙𝚍𝚊𝚝𝚎𝚂𝚝𝚘𝚔(𝚛𝚘𝚘𝚝, 𝚗𝚊𝚖𝚊, 𝚜𝚝𝚘𝚔);
                𝚋𝚛𝚎𝚊𝚔;
            𝚌𝚊𝚜𝚎 𝟺:
                𝚗𝚊𝚖𝚊 = 𝚒𝚗𝚙𝚞𝚝𝙽𝚊𝚖𝚊("𝙼𝚊𝚜𝚞𝚔𝚔𝚊𝚗 𝚗𝚊𝚖𝚊 𝚘𝚋𝚊𝚝 𝚢𝚊𝚗𝚐 𝚊𝚔𝚊𝚗 𝚍𝚒𝚑𝚊𝚙𝚞𝚜: ");
                𝚛𝚘𝚘𝚝 = 𝚍𝚎𝚕𝚎𝚝𝚎𝙽𝚘𝚍𝚎(𝚛𝚘𝚘𝚝, 𝚗𝚊𝚖𝚊);
                𝚋𝚛𝚎𝚊𝚔;
            𝚌𝚊𝚜𝚎 𝟻:
                𝚌𝚘𝚞𝚝 << "\𝚗𝙳𝚊𝚏𝚝𝚊𝚛 𝙾𝚋𝚊𝚝:\𝚗";
                𝚝𝚊𝚖𝚙𝚒𝚕𝚔𝚊𝚗𝙷𝚎𝚊𝚍𝚎𝚛𝚃𝚊𝚋𝚎𝚕();
                𝚝𝚊𝚖𝚙𝚒𝚕𝚔𝚊𝚗𝚃𝚊𝚋𝚎𝚕(𝚛𝚘𝚘𝚝);
                𝚋𝚛𝚎𝚊𝚔;
            𝚌𝚊𝚜𝚎 𝟼:
                𝚌𝚘𝚞𝚝 << "𝙺𝚎𝚕𝚞𝚊𝚛 𝚍𝚊𝚛𝚒 𝚙𝚛𝚘𝚐𝚛𝚊𝚖.\𝚗";
                𝚋𝚛𝚎𝚊𝚔;
            𝚍𝚎𝚏𝚊𝚞𝚕𝚝:
                𝚌𝚘𝚞𝚝 << "𝙿𝚒𝚕𝚒𝚑𝚊𝚗 𝚝𝚒𝚍𝚊𝚔 𝚟𝚊𝚕𝚒𝚍. 𝙼𝚊𝚜𝚞𝚔𝚔𝚊𝚗 𝚊𝚗𝚐𝚔𝚊 𝟷 - 𝟼.\𝚗";
        }
    } 𝚠𝚑𝚒𝚕𝚎 (𝚙𝚒𝚕𝚒𝚑𝚊𝚗 != 𝟼);

    𝚛𝚎𝚝𝚞𝚛𝚗 𝟶;
}
